<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>miracle_DZL的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-07T11:55:59.129Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>miracle_DZL</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>时间效率管理</title>
    <link href="http://yoursite.com/2019/11/07/%E6%97%B6%E9%97%B4%E6%95%88%E7%8E%87%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2019/11/07/时间效率管理/</id>
    <published>2019-11-07T11:08:51.675Z</published>
    <updated>2019-11-07T11:55:59.129Z</updated>
    
    <content type="html"><![CDATA[<p>​      <img src="http://q0lhqnf0a.bkt.clouddn.com/b1.jpg" alt=""></p><h1 id="提高效率的方法——六点优先工作制"><a href="#提高效率的方法——六点优先工作制" class="headerlink" title="提高效率的方法——六点优先工作制"></a>提高效率的方法——六点优先工作制</h1><p>偶然间在网络上发现了一种很好的提高效率的方法-六点优先工作制。“六点优先工作制”被管理学界喻为“价值2.5万美金的时间管理方法”，背后还有一个不同寻常的故事，（该故事流传的有多个版本，不过内容大同小异。）</p><blockquote><p>美国伯利恒钢铁公司总裁理查斯· 舒瓦普曾因为公司濒临破产而向效率大师艾维·李咨询求助。近半个小时的交流中，前20分钟艾维·李耐心地听完其焦头烂额般的倾诉，最后请他拿出一张白纸，并让他写下第二天他要做的全部事情。几分钟后，白纸上满满记录了总裁理查斯·舒瓦普几十项要做的工作。</p><p>此时，艾维·李请他仔细考量，并要求他<strong>按事情的重要顺序，分别从“1”到“6”标出六件最重要的事情。</strong>同时告诉他，请他从明天开始，且每天都这样做：每天一开始，请你全力以赴做好标号为“1”的事情，直到它被完成或被完全准备好，然后再全力以赴做标号为“2”的事，以次类推……</p><p>艾维·李认为<strong>，一般情况下，如果人们每天都能全力以赴完成六件最重要的事，那么他一定是一位高效率人士。</strong></p><p>他请伯利恒总裁理查斯· 舒瓦普自己先按此方法试行，并建议他：“若您在坚持使用后，认为它有效，可将此法推行至您的高层管理人员，若还有效，继续向下推行，直至公司每一位员工。</p><p>如果您或您公司的每一位员工，每一天、每一分、每一秒都在做最重要即最有生产力的事情，假以时日，可以想象，会有什么成就?”</p><p>一年后，作为此次咨询的报酬，艾维利收到了一张来自伯利恒公司的2.5万美金的支票。</p><p>五年后，伯利恒钢铁公司一跃成为当时全美最大的私营钢铁公司。查斯· 舒瓦普常对朋友说：“我和整个团队坚持拣最重要的事情先做，我认为这是我的公司多年来最有价值的一笔投资!”</p></blockquote><p>简而言之，具体方法就是：</p><p><strong>1. 在前一天晚上写下第二天要做的全部事情，对目标、任务、会议等事件分别按优先级进行排序。</strong></p><p><strong>2. 化整为零，把大的、艰难的任务细分为小的、容易的部分。</strong></p><p><strong>3. 从优先级最高的事物着手。按事情的重要顺序，分别从“1”到“6”标出六件最重要的事情。</strong></p><p><strong>4. 和拖延做斗争，如果事情重要，从现在开始做。每天一开始，请你全力以赴做标号为“1”的事情，直到它被完成或被完全准备好，然后再全力以赴做标号为“2”的事情，以此类推</strong>。</p><p>当然这6件事是泛指，你也可以是3件事或者是4件事。视情况而定。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​      &lt;img src=&quot;http://q0lhqnf0a.bkt.clouddn.com/b1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;提高效率的方法——六点优先工作制&quot;&gt;&lt;a href=&quot;#提高效率的方法——六点优先工作制&quot; class=&quot;header
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2.1递归</title>
    <link href="http://yoursite.com/2019/11/04/2.1%E9%80%92%E5%BD%92/"/>
    <id>http://yoursite.com/2019/11/04/2.1递归/</id>
    <published>2019-11-04T13:46:57.720Z</published>
    <updated>2019-11-07T11:50:41.872Z</updated>
    
    <content type="html"><![CDATA[<p>2.1递归</p><p>概念：直接或间接的调用自身的算法成为递归算法。用函数自身给出定义的函数成为递归函数。</p><p>2-1阶乘函数。阶乘函数可递归的定义为<a id="more"></a></p><p>​        n！= 1（n = 0）/ n*(n-1)! (n&gt;0)</p><p>递归的特变：</p><p>1.每个递归函数都必须有非递归定义的初始值，如上式n=0，n!=1.</p><p>2.第二式用较小自变量的函数值来表示较大自变量的函数值来定义n的阶乘</p><p>3.要有临界条件</p><p>例2-1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//factorial 阶乘 阶乘的 因子的</span><br><span class="line">int factorial(int n) &#123;</span><br><span class="line">if (n == 0)</span><br><span class="line">return 1;</span><br><span class="line">return n*factorial(n-1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2-2 斐波那契数列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">无穷数列：1,1,2,3,5,8,13,21,34......</span><br><span class="line">递归定义为</span><br><span class="line">    1                   x = 0</span><br><span class="line">f(x) =  1                   x = 1</span><br><span class="line">           f(x-1) + (x-2)      x &gt; 1</span><br><span class="line">*/</span><br><span class="line">int fibonacci(int n) &#123;</span><br><span class="line">if (n &lt;= 1)</span><br><span class="line">return 1;</span><br><span class="line">return fibonacci(n-1) + fibonacci(n-2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2-3 Ackerman函数（双递归）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int ack(int m,int n)</span><br><span class="line">&#123;</span><br><span class="line">    if(m == 0)</span><br><span class="line">        return n+1;</span><br><span class="line">    else if(n == 0)</span><br><span class="line">        return ack(m-1,1);</span><br><span class="line">    else</span><br><span class="line">        return ack(m-1,ack(m,n-1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2-4  全排列问题</p><p>输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。</p><p><img src="http://q0lhqnf0a.bkt.clouddn.com/1.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">void Perm(Type list[],int k,int m) &#123;    </span><br><span class="line">if (k == m)</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; list[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else &#123;</span><br><span class="line">for (int i = k; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">Swap(int k,int m);</span><br><span class="line">Perm(list,k+1,m);</span><br><span class="line">Swap(int k,int m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Swap(Type &amp;a,Type &amp;b) &#123;</span><br><span class="line">Type temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2.1递归&lt;/p&gt;
&lt;p&gt;概念：直接或间接的调用自身的算法成为递归算法。用函数自身给出定义的函数成为递归函数。&lt;/p&gt;
&lt;p&gt;2-1阶乘函数。阶乘函数可递归的定义为
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>因为热爱</title>
    <link href="http://yoursite.com/2019/10/28/%E5%9B%A0%E4%B8%BA%E7%83%AD%E7%88%B1/"/>
    <id>http://yoursite.com/2019/10/28/因为热爱/</id>
    <published>2019-10-28T12:05:11.304Z</published>
    <updated>2019-11-06T11:31:13.919Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title:博客的第一次开通</p><hr><p>欢迎大家来到我的博客，我非常高兴，能在博客分享自己的故事与经历，或许能帮助大家。</p><h2 id="所谓热爱，就是不断的坚持和投入"><a href="#所谓热爱，就是不断的坚持和投入" class="headerlink" title="所谓热爱，就是不断的坚持和投入"></a>所谓热爱，就是不断的坚持和投入<a id="more"></a></h2><p>你会不会买一本书，其实你从来不看，但是你觉得好像拥有了其中的知识？你会不会制定了一个计划，其实你从来坚持不下来，只是享受制订计划那几天的快乐？</p><p>　　我们总是习惯了这样的开始，然后又寥寥草草的结束。对事如此，对待生活也是如此，当一个人对自己的<a href="https://www.lz13.cn/mingrenmingyan/8609.html" target="_blank" rel="noopener">生命</a>开始用“潦草”来搪塞时，生命也会开始对他潦草。</p><p>　　如果跳舞，要像没有人看着那样尽兴；如果热恋，像从未受伤一样去爱；如果唱歌，像无人听着那样投入；如果活着，就把人间当天堂那般生活。</p><p>　　这个世界上有很多事，都是当你开始认真对待以后，才会发现其中包含的乐趣，你要带着关爱而不是期待地投入生活，当你对待事物越认真，对待工作越投入，你会发现能力与乐趣接踵而来。</p><p>　　因为所谓的热爱，其实就是不断的坚持和投入。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;title:博客的第一次开通&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;欢迎大家来到我的博客，我非常高兴，能在博客分享自己的故事与经历，或许能帮助大家。&lt;/p&gt;
&lt;h2 id=&quot;所谓热爱，就是不断的坚持和投入&quot;&gt;&lt;a href=&quot;#所谓热爱，就是不断的坚持和投入&quot; class=&quot;headerlink&quot; title=&quot;所谓热爱，就是不断的坚持和投入&quot;&gt;&lt;/a&gt;所谓热爱，就是不断的坚持和投入
    
    </summary>
    
    
    
  </entry>
  
</feed>
